@startuml Authentication Flow Overview
!theme plain
title Technology Portfolio SSO - Authentication Flow Overview

actor User as "👤 User"
participant "🌐 Browser" as Browser
participant "🚪 API Gateway\n(8080)" as Gateway
participant "🔐 Authorization\nService (8082)" as AuthService
participant "📊 Technology Portfolio\nService (8083)" as PortfolioService
participant "🆔 SimpleSAMLphp\nIdP (8081)" as IdP
participant "🗄️ PostgreSQL\nAuth DB" as AuthDB
participant "🗄️ PostgreSQL\nPortfolio DB" as PortfolioDB

== Flow 1: Non-Authenticated User ==
User -> Browser: Access protected resource
Browser -> Gateway: GET /api/portfolios
activate Gateway

Gateway -> Gateway: Check for JWT token
note right: No JWT found

Gateway -> Browser: 401 Unauthorized\n+ Redirect to login
deactivate Gateway

Browser -> User: Show login page

User -> Browser: Enter credentials
Browser -> Gateway: POST /api/auth/mock-login
activate Gateway

Gateway -> AuthService: POST /api/auth/validate
activate AuthService

AuthService -> AuthDB: Query user credentials
activate AuthDB
AuthDB -> AuthService: Return user data
deactivate AuthDB

AuthService -> AuthService: Generate JWT token
AuthService -> Gateway: 200 OK\n{JWT token}
deactivate AuthService

Gateway -> Browser: 200 OK\n{JWT token}
deactivate Gateway

Browser -> Browser: Store JWT token
Browser -> User: Redirect to original resource

== Flow 2: Authenticated User ==
User -> Browser: Access protected resource
Browser -> Browser: Retrieve JWT token
Browser -> Gateway: GET /api/portfolios\nAuthorization: Bearer <JWT>
activate Gateway

Gateway -> Gateway: Validate JWT token
note right: JWT is valid

Gateway -> AuthService: POST /api/auth/authorize
activate AuthService

AuthService -> AuthDB: Query user permissions
activate AuthDB
AuthDB -> AuthService: Return permissions
deactivate AuthDB

AuthService -> Gateway: 200 OK\n{authorized: true}
deactivate AuthService

Gateway -> PortfolioService: GET /api/portfolios\nAuthorization: Bearer <JWT>
activate PortfolioService

PortfolioService -> PortfolioDB: Query portfolios
activate PortfolioDB
PortfolioDB -> PortfolioService: Return data
deactivate PortfolioDB

PortfolioService -> Gateway: 200 OK\n{portfolios: [...]}
deactivate PortfolioService

Gateway -> Browser: 200 OK\n{portfolios: [...]}
deactivate Gateway

Browser -> User: Display data

== Flow 3: SAML Authentication (Alternative) ==
note over User, IdP: For production SAML authentication

User -> Browser: Access protected resource
Browser -> Gateway: GET /api/portfolios
activate Gateway

Gateway -> Browser: 302 Redirect to SAML login
deactivate Gateway

Browser -> IdP: Redirect to SAML IdP
activate IdP

User -> IdP: Enter SAML credentials
IdP -> IdP: Validate SAML credentials
IdP -> Browser: 302 Redirect with SAML response
deactivate IdP

Browser -> Gateway: POST /saml/acs\n{SAML response}
activate Gateway

Gateway -> Gateway: Validate SAML response
Gateway -> AuthService: Create/update user from SAML
activate AuthService

AuthService -> AuthDB: Upsert user from SAML data
activate AuthDB
AuthDB -> AuthService: Return user data
deactivate AuthDB

AuthService -> AuthService: Generate JWT token
AuthService -> Gateway: 200 OK\n{JWT token}
deactivate AuthService

Gateway -> Browser: 302 Redirect to original resource\n+ Set JWT cookie
deactivate Gateway

Browser -> User: Redirect to protected resource

== Error Flows ==
note over User, PortfolioDB
Common Error Scenarios:
1. Invalid credentials → 401 Unauthorized
2. Expired JWT → 401 + redirect to login
3. Insufficient permissions → 403 Forbidden
4. Invalid SAML response → 401 + redirect to login
5. Service unavailable → 503 Service Unavailable
end note

== Security Features ==
note over Gateway, AuthService
Security Implementations:
1. JWT token validation and signature verification
2. Role-based access control (RBAC)
3. Permission-based authorization
4. Token expiration handling
5. Secure cookie handling
6. CSRF protection
7. Rate limiting
end note

@enduml 