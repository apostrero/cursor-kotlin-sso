version: '3.8'

services:
  # Identity Provider (SimpleSAMLphp)
  identity-provider:
    image: kenchan0130/simplesamlphp
    container_name: saml-idp
    ports:
      - "8080:8080"
    environment:
      SIMPLESAMLPHP_SP_ENTITY_ID: http://localhost:8081
      SIMPLESAMLPHP_SP_ASSERTION_CONSUMER_SERVICE: http://localhost:8081/saml/acs
      SIMPLESAMLPHP_SP_SINGLE_LOGOUT_SERVICE: http://localhost:8081/saml/logout
      SIMPLESAMLPHP_IDP_ADMIN_PASSWORD: admin123
      SIMPLESAMLPHP_IDP_SECRET_SALT: supersecretidpsalt
      SIMPLESAMLPHP_IDP_SESSION_DURATION_SECONDS: 3600
    networks:
      - techportfolio-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/simplesaml/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Service Discovery
  eureka-server:
    image: steeltoeoss/eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - techportfolio-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Databases
  postgres-auth:
    image: postgres:15-alpine
    container_name: postgres-auth
    environment:
      POSTGRES_DB: authorization
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data
      - ./database/auth-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - techportfolio-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d authorization"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres-portfolio:
    image: postgres:15-alpine
    container_name: postgres-portfolio
    environment:
      POSTGRES_DB: portfolio
      POSTGRES_USER: portfolio_user
      POSTGRES_PASSWORD: portfolio_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_portfolio_data:/var/lib/postgresql/data
      - ./database/portfolio-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - techportfolio-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U portfolio_user -d portfolio"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - techportfolio-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8081:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      # SAML Configuration
      SAML_IDP_METADATA_URL: http://identity-provider:8080/simplesaml/saml2/idp/metadata.php
      SAML_IDP_ENTITY_ID: http://identity-provider:8080/simplesaml/saml2/idp/metadata.php
      SAML_SP_ENTITY_ID: http://localhost:8081
      SAML_SP_BASE_URL: http://localhost:8081
      # JWT Configuration
      JWT_SECRET: docker-jwt-secret-key-512-bits-minimum-for-HS512-algorithm
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      eureka-server:
        condition: service_healthy
      identity-provider:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - techportfolio-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Authorization Service
  authorization-service:
    build:
      context: ./authorization-service
      dockerfile: Dockerfile
    container_name: authorization-service
    ports:
      - "8082:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-auth:5432/authorization
      SPRING_DATASOURCE_USERNAME: auth_user
      SPRING_DATASOURCE_PASSWORD: auth_password
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      eureka-server:
        condition: service_healthy
      postgres-auth:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - techportfolio-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Technology Portfolio Service
  technology-portfolio-service:
    build:
      context: ./technology-portfolio-service
      dockerfile: Dockerfile
    container_name: technology-portfolio-service
    ports:
      - "8083:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-portfolio:5432/portfolio
      SPRING_DATASOURCE_USERNAME: portfolio_user
      SPRING_DATASOURCE_PASSWORD: portfolio_password
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      eureka-server:
        condition: service_healthy
      postgres-portfolio:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - techportfolio-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - techportfolio-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - techportfolio-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_auth_data:
  postgres_portfolio_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  techportfolio-network:
    driver: bridge 